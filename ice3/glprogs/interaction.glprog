glprog interaction
{
	vertex
	{
		// Uniforms
		uniform vec4 lightOrigin;
		uniform vec4 viewOrigin;
		uniform vec4 lightProjectS;
		uniform vec4 lightProjectT;
		uniform vec4 lightProjectQ;
		uniform vec4 lightFalloffS;
		uniform vec4 bumpMatrixS;
		uniform vec4 bumpMatrixT;
		uniform vec4 diffuseMatrixS;
		uniform vec4 diffuseMatrixT;
		uniform vec4 specularMatrixS;
		uniform vec4 specularMatrixT;
		uniform vec4 colorModulate;
		uniform vec4 colorAdd;
		uniform mat4 lightMatrices[6];
		uniform mat4 modelMatrix;

		// Varying variables
		varying vec3 lightVector;
		varying vec2 bumpST;
		varying vec2 lightFalloff;
		varying vec3 lightProjection;
		varying vec2 diffuseST;
		varying vec2 specularST;
		varying vec3 halfAngleVector;
		varying vec4 primaryColor;
		varying vec3 viewDir;
		varying vec4 shadowCoords[6];
		
		// Attributes
		attribute vec4 aPosition;
		attribute vec4 aTexCoord;
		attribute vec3 aNormal;
		attribute vec3 aTangent0;
		attribute vec3 aTangent1;
		attribute vec4 aColor;

		void main() {
			 // Fetch fixed-function attributes
			vec4 position = gl_Vertex;
			vec4 texCoord = aTexCoord;
			vec3 normal   = aNormal;
			vec3 tangent0 = aTangent0;
			vec3 tangent1 = aTangent1;
			vec4 color = aColor;
			
			for (int i = 0; i < 6; i++) {
				shadowCoords[i] = lightMatrices[i] * (modelMatrix * vec4(gl_Vertex.xyz, 1.0));
			}

			// Normal map texgen
			bumpST = vec2(dot(bumpMatrixS, texCoord), dot(bumpMatrixT, texCoord));

			// Light falloff texgen
			lightFalloff = vec2(dot(lightFalloffS, position), 0.5);

			// Light projection texgen
			lightProjection = vec3(dot(lightProjectS, position), dot(lightProjectT, position), dot(lightProjectQ, position));

			// Diffuse map texgen
			diffuseST = vec2(dot(diffuseMatrixS, texCoord), dot(diffuseMatrixT, texCoord));

			// Specular map texgen
			specularST = vec2(dot(specularMatrixS, texCoord), dot(specularMatrixT, texCoord));

			// Light and half-angle vectors
			mat3 TBN = mat3(tangent0, tangent1, normal);

			vec3 L = lightOrigin.xyz - position.xyz;
			vec3 V = viewOrigin.xyz - position.xyz;
			vec3 H = normalize(L) + normalize(V);

			lightVector = vec3(
				dot(L, tangent0),
				dot(L, tangent1),
				dot(L, normal)
			);

			halfAngleVector = vec3(
				dot(H, tangent0),
				dot(H, tangent1),
				dot(H, normal)
			);
			
			viewDir = normalize(vec3(dot(V, tangent0), dot(V, tangent1), dot(V, normal)));

			// Primary color
			primaryColor = color * colorModulate + colorAdd;

			// Position
			gl_Position = ftransform();
		}
	}
	
	pixel
	{
		// Varying variables from the vertex shader
		varying vec4 primaryColor;
		varying vec3 lightVector;
		varying vec2 bumpST;
		varying vec2 lightFalloff;
		varying vec3 lightProjection;
		varying vec2 diffuseST;
		varying vec2 specularST;
		varying vec3 halfAngleVector;
		varying vec3 viewDir;
		varying vec4 shadowCoords[6];
		
		// Uniforms
		uniform vec4 diffuse;
		uniform vec4 specular;
		uniform int numSides;
		uniform sampler2D bumpImage;
		uniform sampler2D lightFalloffImage;
		uniform sampler2D lightImage;
		uniform sampler2D diffuseImage;
		uniform sampler2D specularImage;
		uniform sampler2D specularTableImage;
		uniform sampler2D shadowMaps[6];

		float shadowFactor(int index) {
			vec3 coord = shadowCoords[index].xyz / shadowCoords[index].w; // Convert to normalized device coordinates (NDC)
			coord = coord * 0.5 + 0.5; // Transform from [-1, 1] range to [0, 1] range
			
			if(coord.z > 1)
				return 1;

			float factor = 0.0;
			const int samples = 2; // Number of samples for PCF
			float offset = 1.0 / 1024.0; // Adjust this value based on your shadow map resolution

			// Loop through samples
			for (int x = -samples; x <= samples; ++x) {
				for (int y = -samples; y <= samples; ++y) {
					vec2 offsetCoord = coord.xy + vec2(float(x), float(y)) * offset;
					float depth = texture2D(shadowMaps[index], offsetCoord).r;
					factor += (coord.z - 0.001) < depth ? 1.0 : 0.0;
				}
			}

			// Average the results
			factor = factor / ((samples * 2 + 1) * (samples * 2 + 1));
			return factor;
		}
		
		// POM parameters
		const float numLayers = 32.0;
		const float layerHeight = 0.01;

		void main() {
			// Apply the offset to the texture coordinates
			vec2 bumpedST = bumpST;
			vec2 diffuseST = diffuseST;
			vec2 specularST = specularST;
			
			// Compute view direction in tangent space
			vec3 V = normalize(viewDir);

			// Initialize parallax mapping
			float layerDepth = 1.0 / numLayers;
			vec2 P = V.xy * layerHeight / V.z;
			float currentLayerDepth = 0.0;
			vec2 deltaTexCoords = P / numLayers;

			// Loop through layers for parallax occlusion mapping
			for (int i = 0; i < int(numLayers); i++) {
				float height = normalize(texture(bumpImage, bumpST).xyz  * 2.0 - 1.0).z;
				if (currentLayerDepth >= height) {
					break;
				}
				bumpedST -= deltaTexCoords;
				diffuseST -= deltaTexCoords;
				specularST -= deltaTexCoords;
				currentLayerDepth += layerDepth;
			}
			
			// Sample the bump map and adjust range to [-1, 1]
			vec3 N = normalize(texture(bumpImage, bumpedST).xyz * 2.0 - 1.0);

			// Sample the light vector and normalize it
			vec3 L = normalize(lightVector);

			// Compute dot product of normal and light vector and clamp to [0, 1]
			float NdotL = clamp(dot(N, L), 0.0, 1.0);

			// Sample the diffuse map with the offset coordinates
			vec4 Cd = diffuse * texture(diffuseImage, diffuseST);

			// Sample the half-angle vector and normalize it
			vec3 H = normalize(halfAngleVector);

			// Compute dot product of normal and half-angle vector and clamp to [0, 1]
			float NdotH = clamp(dot(N, H), 0.0, 1.0);

			// Compute specular power
			const float specularPower = 10.0f;
			float specPower = pow(NdotH, specularPower);
			vec4 spec = specular * specPower;

			// Sample the light image using projective texturing and the light falloff image
			vec4 Cl = textureProj(lightImage, vec3(lightProjection)) * texture(lightFalloffImage, lightFalloff);
			
			float shadow = 1.0;
			if(numSides > 0)
			{
				for (int i = 0; i < numSides; i++) {
					float factor = shadowFactor(i);
					if(factor == -1)
					{
						gl_FragColor = vec4(1, 0, 0, 1);
						return;
					}
					shadow *= factor;
				}
			}

			// Compute final color
			gl_FragColor = primaryColor * Cl * NdotL * (Cd + spec * 2.0 * texture(specularImage, specularST));
			gl_FragColor *= shadow;
		}
	}
}